/* Jonah Zamora Epstein
 * File: Prefix.java
 * ----------------------
 * This file is a class that connects to an API and POSTs a token and in return gets a json
 * dictionary with a datestamp and a time interval in seconds. It then adds the seconds to 
 * the time stamp and restructures it to post it back to the API.
 */
package code2040APi;
import java.io.*;
import java.net.*;
import org.json.*;
import org.joda.time.*;

public class DatingGame {
	public static void main(String args[]) {
		
		BufferedReader br;
		JSONObject post;
		JSONObject postReturn;
		JSONObject json;
		String token = "f13654f60f6367dd201d065502a9c8ea";

		try {
			post = new JSONObject();
			post.put("token", token);
			br = postGetBr(post.toString(), "http://challenge.code2040.org/api/dating");
			json = new JSONObject(br.readLine());
			br.close();
			
			//parses the datetime in the correct form using a seperate class, then adds the 
			//seconds as well. 
			DateTime datetime = DateTime.parse(json.getString("datestamp"));
			datetime = datetime.plusSeconds(json.getInt("interval"));
			
			//creates a new string by cutting off the unwanted digits and then adding Z
			String newDate = datetime.toString();
			newDate = newDate.substring(0, 19);
			newDate += 'Z';

			//same as step 3 & 4 (haystack and prefix)
			postReturn = new JSONObject();
			postReturn.put("token", token);
			postReturn.put("datestamp", newDate);
			br = postGetBr(postReturn.toString(), "http://challenge.code2040.org/api/dating/validate");
			System.out.println(br.readLine());
			br.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/*
	 * Helper function - Takes in a string containing what you desire to post along with 
	 * the url you wish to post it to. It then POSTs a JSON dictionary to the URL and then 
	 * it returns a buffered reader with the input stream from the url.
	 */
	public static BufferedReader postGetBr(String post, String url) throws Exception {
		//initializes variables
		HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
		OutputStream os;
		
		try {
			//set output and request type
			conn.setDoOutput(true);
			conn.setRequestMethod("POST");
			conn.setRequestProperty("Content-Type", "application/json");

			//sets the os stream to the output stream connected to the URL
			os = conn.getOutputStream();
			os.write(post.getBytes());
			os.flush();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return new BufferedReader(new InputStreamReader(conn.getInputStream()));
	}

}
